# Generated by Django 4.2.10 on 2024-09-18 15:36

from django.db import migrations, models
import django.db.models.deletion
import django_prometheus.models
import uuid


class Migration(migrations.Migration):
    dependencies = [
        ("teams", "0052_team_permission_set"),
        ("camps", "0036_camp_economy_team"),
        ("economy", "0038_reimbursement_bank_account_alter_reimbursement_user"),
    ]

    operations = [
        migrations.CreateModel(
            name="PosProduct",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "external_id",
                    models.CharField(
                        help_text="The external ID of the product.",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "brand_name",
                    models.CharField(
                        help_text="The name of the brand.", max_length=255
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the product.", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="The description of the product."
                    ),
                ),
                (
                    "sales_price",
                    models.IntegerField(help_text="The current price of this product."),
                ),
                (
                    "unit_size",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="The size of this product.",
                        max_digits=10,
                    ),
                ),
                (
                    "size_unit",
                    models.CharField(
                        blank=True,
                        help_text="The unit the size of this product is measured in, where applicable.",
                        max_length=100,
                    ),
                ),
                (
                    "abv",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="The ABV level of this product, where applicable.",
                        max_digits=4,
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        blank=True,
                        help_text="The tags for this product as a comma seperated string.",
                        max_length=100,
                    ),
                ),
                (
                    "expenses",
                    models.ManyToManyField(
                        help_text="The related expenses for this PosProduct. Only expenses related to a Pos-team are shown. For products composed of multiple ingredients all relevant expenses should be picked.",
                        to="economy.expense",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                django_prometheus.models.ExportModelOperationsMixin("pos_product"),
                models.Model,
            ),
        ),
        migrations.AddField(
            model_name="pos",
            name="external_id",
            field=models.CharField(
                default="external_id_unset",
                help_text="The external database ID of this pos location.",
                max_length=100,
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="pos",
            name="team",
            field=models.ForeignKey(
                help_text="The Team managing this POS",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="points_of_sale",
                to="teams.team",
            ),
        ),
        migrations.CreateModel(
            name="PosTransaction",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "external_transaction_id",
                    models.CharField(
                        help_text="The external ID of this pos transaction.",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "external_user_id",
                    models.CharField(
                        blank=True,
                        help_text="The external ID of the pos user who did this transaction.",
                        max_length=100,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        help_text="The date and time of this PoS transaction."
                    ),
                ),
                (
                    "pos",
                    models.ForeignKey(
                        help_text="The Pos this PosTransaction belongs to.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="pos_transactions",
                        to="economy.pos",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                django_prometheus.models.ExportModelOperationsMixin("pos_transaction"),
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="PosSale",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "sales_price",
                    models.IntegerField(
                        help_text="The price of this product (at the time of sale)."
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="The product being sold.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="pos_sales",
                        to="economy.posproduct",
                    ),
                ),
                (
                    "transaction",
                    models.ForeignKey(
                        help_text="The transaction to which this sale belongs.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="pos_sales",
                        to="economy.postransaction",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                django_prometheus.models.ExportModelOperationsMixin("pos_sale"),
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="PosProductCost",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "timestamp",
                    models.DateTimeField(
                        help_text="The timestamp from which this product_cost is correct."
                    ),
                ),
                (
                    "product_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="The cost/expense (in DKK, including VAT) for each product sold. For products composed of multiple ingredients this number should include the total cost per product sold.",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "camp",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="pos_product_costs",
                        to="camps.camp",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="The product this cost applies to.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="pos_product_costs",
                        to="economy.posproduct",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                django_prometheus.models.ExportModelOperationsMixin("pos_product_cost"),
                models.Model,
            ),
        ),
    ]
