# Generated by Django 4.2.16 on 2024-09-23 06:02
from __future__ import annotations

import uuid

import colorfield.fields
import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django_prometheus.models
from django.db import migrations
from django.db import models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("teams", "0052_team_permission_set"),
    ]

    operations = [
        migrations.CreateModel(
            name="Group",
            fields=[
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(help_text="Name or description of this group", max_length=100)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Layer",
            fields=[
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(help_text="Name or description of this layer", max_length=100)),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="The url slug for this layer. Leave blank to autogenerate one.",
                        unique=True,
                    ),
                ),
                ("description", models.TextField(help_text="Description of this layer")),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        default="list",
                        help_text="Name of the fontawesome icon to use, including the 'fab fa-' or 'fas fa-' part.",
                        max_length=100,
                    ),
                ),
                ("invisible", models.BooleanField(default=False, help_text="Is the layer invisible in the map view?")),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="layers",
                        to="maps.group",
                    ),
                ),
                (
                    "responsible_team",
                    models.ForeignKey(
                        blank=True,
                        help_text="The Team responsible for this Layer.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="teams.team",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(django_prometheus.models.ExportModelOperationsMixin("layer"), models.Model),
        ),
        migrations.CreateModel(
            name="Feature",
            fields=[
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(help_text="Name or description of this feature", max_length=100)),
                ("description", models.TextField(help_text="Description of this feature")),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.GeometryCollectionField(help_text="Geometric data", srid=4326),
                ),
                (
                    "color",
                    colorfield.fields.ColorField(default="#FFFFFFFF", image_field=None, max_length=25, samples=None),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        default="list",
                        help_text="Name of the fontawesome icon to use, including the 'fab fa-' or 'fas fa-' part.",
                        max_length=100,
                    ),
                ),
                ("url", models.URLField(blank=True)),
                (
                    "topic",
                    models.CharField(blank=True, help_text="Name of the topic to update this feature", max_length=200),
                ),
                (
                    "processing",
                    models.CharField(
                        blank=True,
                        help_text="Name of javascript function call for processing data from the topic",
                        max_length=100,
                    ),
                ),
                (
                    "layer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="features",
                        to="maps.layer",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ExternalLayer",
            fields=[
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(help_text="Name or description of this layer", max_length=100)),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="The url slug for this layer. Leave blank to autogenerate one.",
                        unique=True,
                    ),
                ),
                ("description", models.TextField(help_text="Description of this layer")),
                ("url", models.URLField(help_text="URL of the GEOJSON layer", max_length=255)),
                (
                    "responsible_team",
                    models.ForeignKey(
                        blank=True,
                        help_text="The Team responsible for this Layer.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="teams.team",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
